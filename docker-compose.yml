services:
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports: 
      - 3000:3000
    volumes:
      - ./frontend/:/frontend
  api:
    container_name: Api
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
    ports:
      - ${PORT}:${PORT}
    volumes:
      - ./backend/:/backend
    depends_on:
      database:
        condition: service_healthy
    restart: always
  database:
    image: postgres:latest
    container_name: database
    environment:
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    expose:
      - 5432
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
      interval: 10s
      timeout: 3s
      retries: 3
    ports:
    - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
    - .backend/app/data:/data/database
  nginx:
    image: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 8080:80
    container_name: reverse-proxy
    depends_on:
      - frontend
      - api
volumes: {}